<?xml version="1.0" encoding="UTF-8"?>

<!--
This file defines the base syntax of the expresso toolkit specification.

It includes the expression type definition as well as the basic structure of expresso toolkits.

It does not include anything "useful" in the concrete, i.e. no values or transformations.  This file is an interface specification.
-->
<qonfig-def name="Expresso-Core" version="0.1" root="expresso">
	<value-types>
		<?DOC A name for a variable?>
		<pattern name="identifier">[_a-zA-Z$][_a-zA-Z0-9$]*</pattern>

		<?DOC An expression consisting of some combination of values via operators?>
		<external name="expression" />
	</value-types>

	<add-ons>
		<add-on name="expresso-parseable">
			<child-def name="expresso-parser" type="expresso-parser" min="0" />
			<attribute name="inherit-operators" type="boolean" default="true" />
			<child-def name="unary-operators" type="unary-operators" min="0" max="inf" />
			<child-def name="binary-operators" type="binary-operators" min="0" max="inf" />
		</add-on>

		<?DOC A structure with a name?>
		<add-on name="named">
			<?DOC The name of the item?>
			<attribute name="name" type="identifier" specify="required" />
		</add-on>
		<?DOC A structure with a (potentially) declared value type?>
		<add-on name="typed">
			<?DOC The declared type of the variable?>
			<attribute name="type" type="string" specify="optional" />
		</add-on>
		<?DOC A structure with a declared value type?>
		<add-on name="type-required" inherits="typed">
			<attr-mod name="typed.type" type="string" specify="required" />
		</add-on>

		<?DOC A named model value?>
		<add-on name="model-element" requires="model-value" inherits="named" />

		<?DOC An element type that may declare values which must be supplied by the implementation?>
		<add-on name="with-element-model" abstract="true">
			<element-meta name="element-model" type="element-model" min="0" />
		</add-on>
		<?DOC Instances of this type may declare a &lt;model> element with local variables only available within the scope of the element?>
		<add-on name="with-local-model" abstract="true">
			<?DOC The local model with values defined only for use within the element?>
			<child-def name="model" type="model" min="0" />
		</add-on>
		<?DOC An element value under a &lt;with-element-model> that must be supplied by the implementation of the element?>
		<add-on name="element-model-value" requires="model-value" inherits="model-element" abstract="true">
			<?DOC The <code>name-attribute</code> attribute may be specified instead, indicating that the name of this value
				should be determined by the given identifier-typed attribute on the &lt;with-element-model>-tagged element?>
			<attr-mod name="named.name" default="$" />
			<?DOC If specified, this indicates that the name of this value should be determined
				by the given identifier-typed attribute on the &lt;with-element-model>-tagged element?>
			<attribute name="name-attribute" type="string" specify="optional" />
			<?DOC If specified, this value will be set to the given expression-typed value on the &lt;with-element-model>-tagged element?>
			<attribute name="source-attribute" type="string" specify="optional" />
			<?DOC Cannot specify a value here.  The value is determined either by the attribute specified by <code>source-attribute</code>
				or by the implementation?>
			<value-mod specify="forbidden" /> <!-- External/element values are specified by code instantiating the model -->
		</add-on>

		<?DOC A tag for &lt;model-value> extensions that can be used under an &lt;ext-model> element?>
		<add-on name="allow-ext-model" abstract="true" />
		<?DOC Inherited by &lt;model-value>s under an &lt;ext-model> element?>
		<add-on name="ext-model-value" requires="model-value" inherits="type-required" abstract="true">
			<?DOC The default value to use if one is not supplied externally?>
			<attribute name="default" type="expression" specify="optional" />
			<?DOC External values are specified by code instantiating the model ?>
			<value-mod specify="forbidden" />
		</add-on>
	</add-ons>

	<elements>
		<element-def name="expresso-parser">
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="expresso-java" extends="expresso-parser">
			<value-mod specify="optional" default="new org.observe.expresso.JavaExpressoParser()" />
		</element-def>
		<element-def name="operators" abstract="true">
			<value type="string" specify="required" />
		</element-def>
		<element-def name="unary-operators" extends="operators" />
		<element-def name="binary-operators" extends="operators" />

		<?DOC A section containing imports that make it possible to specify certain types, fields, or methods from expressions without full-qualification?>
		<element-def name="imports">
			<?DOC An import type, field, method, or wildcard?>
			<child-def name="import" type="import" min="0" max="inf" />
		</element-def>
		<?DOC An import element under a &lt;imports> section?>
		<element-def name="import">
			<?DOC The import type, field, method, or wildcard?>
			<value type="string" specify="required" />
		</element-def>
		
		<!-- Models, values and transformations -->
		<element-def name="abst-model" abstract="true">
			<?DOC A value declared in the model?>
			<child-def name="value" type="model-value" inherits="model-element" min="0" max="inf" />
		</element-def>
		<element-def name="model-value" abstract="true" inherits="typed">
			<?DOC The value for the variable?>
			<value type="expression" specify="optional" />
		</element-def>

		<element-def name="models">
			<?DOC A model defined in the root model set?>
			<child-def name="model" type="abst-model" min="0" max="inf" inherits="named" />
		</element-def>

		<!-- External models.  These serve only as markers that are later checked against the external models that are provided
			 to the app.  Since they are only expectations of values that will be supplied externally,
			 no values can be specified in the elements. -->
		<element-def name="ext-model" extends="abst-model">
			<child-mod child="abst-model.value" requires="allow-ext-model" inherits="ext-model-value" />
			<?DOC A sub-model defined under the parent model?>
			<child-def name="sub-model" type="ext-model" min="0" max="inf" inherits="named" />
		</element-def>

		<!-- Internal models.  These function as variables that are defined and sometimes instantiated inside the app. -->
		<element-def name="model" extends="abst-model">
			<?DOC A sub-model defined under the parent model?>
			<child-def name="sub-model" type="model" min="0" max="inf" inherits="named" />
		</element-def>

		<!-- Specified under an element-def declaration to define model values that must be supplied specifically for the interpreted value -->
		<?DOC The element model metadata under a &lt;with-element-model> element containing values that must be supplied by the implementation?>
		<element-def name="element-model" extends="abst-model">
			<child-mod child="abst-model.value" requires="allow-ext-model" inherits="element-model-value" />
		</element-def>

		<element-def name="expresso">
			<child-def name="imports" type="imports" min="0" />
			<?DOC The model of the document, defining values and other structures that can be used to control the behavior of elements in the document?>
			<child-def name="models" type="models" />
		</element-def>
	</elements>
</qonfig-def>
