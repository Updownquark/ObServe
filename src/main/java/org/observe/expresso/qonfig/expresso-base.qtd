<?xml version="1.0" encoding="UTF-8"?>

<!--
This file defines the basic set of operations for the expresso toolkit.

It builds on the Expresso-Core specification and contains everything needed for basic expresso models - values, collections, transformations,
	external and internal models.
-->
<qonfig-def name="Expresso-Base" version="0.1" xmlns:core="Expresso-Core v0.1">
	<value-types>
		<pattern name="float">[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?</pattern>

		<one-of name="size-type">
			<literal>key</literal>
			<literal>value</literal>
		</one-of>
	</value-types>

	<add-ons>
		<?DOC A scalar value in a &lt;model> element. This element has 2 modes:<br>
			If its value is not set, it will function as a container which may be set as needed.<br>
			If its value is set, it will function as a transformation of other values in the models.
				In this mode, assignments to the value will cause a change in one of the source values.?>
		<add-on name="int-value" requires="value">
			<?DOC The value with which to initialize this variable?>
			<attribute name="init" type="expression" specify="optional" />
		</add-on>
		<add-on name="int-list" requires="list" inherits="type-required">
			<child-def name="element" type="element" min="0" max="inf" />
		</add-on>
		<add-on name="int-map" requires="map" inherits="type-required">
			<attr-mod name="map.key-type" />
			<child-def name="entry" type="entry" min="0" max="inf" />
		</add-on>

		<add-on name="map-model-value" requires="model-value">
			<attribute name="key-type" type="string" specify="required" />
			<value-mod specify="forbidden" />
		</add-on>
		<add-on name="sorted-model-value" requires="model-value">
			<child-def name="sort" type="sort" min="0" />
		</add-on>

		<add-on name="complex-operation" requires="operation" inherits="with-element-model">
			<element-model>
				<value name-attribute="source-as" />
			</element-model>
			<attribute name="source-as" type="identifier" />
		</add-on>
		<add-on name="abst-map-op" requires="operation" abstract="true" >
			<attribute name="cache" type="boolean" default="true" />
			<attribute name="re-eval-on-update" type="boolean" default="true" />
			<attribute name="fire-if-unchanged" type="boolean" default="true" />
			<attribute name="null-to-null" type="boolean" default="false" />
			<attribute name="many-to-one" type="boolean" default="false" />
			<attribute name="one-to-many" type="boolean" default="false" />
		</add-on>

		<add-on name="map-reverse-type" requires="map-reverse" abstract="true" />
		<add-on name="modify-source" inherits="map-reverse-type">
			<attribute name="enabled" type="expression" specify="optional" />
			<attribute name="accept" type="expression" specify="optional" />
			<attribute name="add" type="expression" specify="optional" />
			<attribute name="add-accept" type="expression" specify="optional" />
		</add-on>
		<add-on name="replace-source" inherits="modify-source">
			<attribute name="inexact" type="boolean" default="false" />
		</add-on>

		<add-on name="if-op" requires="scalar-operation">
			<attribute name="if" type="expression" />
		</add-on>
		<add-on name="if-as-operation" requires="if" inherits="abst-map-op, complex-operation, typed" />

		<add-on name="case-op" requires="scalar-operation">
			<attribute name="case" type="expression" />
		</add-on>

		<add-on name="flatten-reverse-type" abstract="true" />
		<add-on name="flatten-replace-source" inherits="flatten-reverse-type">
			<attribute name="function" type="expression" />
			<attribute name="accept" type="expression" />
		</add-on>
		<add-on name="flatten-modify-source" inherits="flatten-replace-source">
			<attribute name="add" type="expression" />
			<attribute name="add-accept" type="expression" />
		</add-on>
	</add-ons>

	<elements>
		<!-- Models, values and transformations -->
		<?DOC An event that fires values to be consumed by listeners?>
		<element-def name="event" extends="model-value" inherits="allow-ext-model" />
		<?DOC An action that can be invoked?>
		<element-def name="action" extends="model-value" inherits="allow-ext-model,with-local-model" />
		<?DOC An action that invokes a list of actions?>
		<element-def name="action-group" extends="model-value" inherits="with-local-model">
			<child-def name="action" type="action" min="0" max="inf" />
		</element-def>
		<?DOC A simple value. For internal models, this may be configured with:<ul>
			<li>An 'init=' attribute to initialize it. The value will not change as any components of the init expression change,
		  		and the value is settable regardless of the init expression.</li>
			<li>A value. This value will be slaved to that of the given expression, changing as it changes. Assignment of this value will
		  		propagate to the configured value.</li>
			<li>Nothing, in which case the initial value will be defaulted (same as a java field)</li>
		</ul>?>
		<element-def name="value" extends="model-value" inherits="allow-ext-model" />

		<?DOC An ordered collection of values.  For internal models, this may be initialized with elements.?>
		<element-def name="list" extends="model-value" inherits="allow-ext-model" />
		<?DOC May be used to initialize collections in internal models?>
		<element-def name="element">
			<?DOC The value for the element?>
			<value type="expression" specify="required" />
		</element-def>
		<?DOC An ordered collection with added addition capabilities?>
		<element-def name="value-set" extends="list" />
		<?DOC An ordered collection of values with no duplicates?>
		<element-def name="set" extends="list" />
		<?DOC An ordered, sorted collection of values?>
		<element-def name="sorted-list" extends="list" inherits="sorted-model-value" />
		<?DOC An ordered, sorted collection of values with no duplicates?>
		<element-def name="sorted-set" extends="set" inherits="sorted-model-value" />

		<?DOC An association of key values each to a single other value?>
		<element-def name="map" extends="model-value" inherits="allow-ext-model,map-model-value" />
		<?DOC May be used to initialize maps in internal models?>
		<element-def name="entry" extends="element">
			<?DOC The key to store the value under?>
			<attribute name="key" type="expression" />
		</element-def>
		<?DOC An association of sorted key values each to a single other value?>
		<element-def name="sorted-map" extends="map" inherits="sorted-model-value" />
		<?DOC An association of key values each to one or more other values?>
		<element-def name="multi-map" extends="map" />
		<?DOC An association of sorted key values each to one or more other values?>
		<element-def name="sorted-multi-map" extends="multi-map" inherits="sorted-model-value" />

		<?DOC A simple value that cannot be changed after initialization. This value does not change as the expression used to initialize it does.?>		
		<element-def name="constant" extends="model-value">
			<value-mod specify="required" />
		</element-def>

		<?DOC A transformation takes a value or values supplied by other models and performs some dynamic operation on the value(s)
			to produce a result that is a product of the source. Transform values update as their source values change.?>
		<element-def name="transform" extends="model-value">
			<value-mod specify="forbidden" /> <!-- No value for transform -->
			<?DOC The source value to transform?>
			<attribute name="source" type="expression" specify="required" />
			<?DOC Operations to perform in succession on the source value?>
			<child-def name="op" type="operation" min="1" max="inf" />
		</element-def>
		<?DOC An operation for a &lt;transformation>?>
		<element-def name="operation" abstract="true" />
		<?DOC Causes a model value or action to become unmodifiable or uninvokable on an expression?>

		<element-def name="disable" extends="operation" inherits="complex-operation">
			<attr-mod name="complex-operation.source-as" default="$SOURCE$" />
			<?DOC The expression to disable the value or action with.  The expression can be String- or boolean-typed.<br>
				If boolean-typed, the value will be enabled when the expression is <b>true</b>.<br>
				If String-typed, the value will be enabled when the expression is null.
				Otherwise the value may be displayed to the user for information.?>
			<attribute name="with" type="expression" />
		</element-def>

		<element-def name="filter-accept" extends="operation" inherits="complex-operation">
			<attribute name="test" type="expression" />
		</element-def>

		<element-def name="map-to" extends="operation" inherits="abst-map-op, complex-operation, typed">
			<element-model>
				<value name-attribute="combined-value/name" />
			</element-model>
			<attribute name="equivalence" type="expression" specify="optional" />
			<child-def name="combined-value" type="combine-with" min="0" max="inf" />
			<child-def name="map" type="map-with" />
			<child-def name="reverse" type="map-reverse" min="0" />
		</element-def>
		<element-def name="map-with">
			<value type="expression" />
		</element-def>
		<element-def name="combine-with" inherits="named">
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="map-reverse" inherits="with-element-model">
			<element-model>
				<value name-attribute="target-as" />
			</element-model>
			<attribute name="type" type="map-reverse-type" />
			<!-- Previous result reference? -->
			<attribute name="target-as" type="identifier" />
			<value type="expression" />
		</element-def>

		<element-def name="scalar-operation" extends="operation" abstract="true" />

		<element-def name="return" extends="scalar-operation">
			<value type="expression" />
		</element-def>

		<element-def name="if" extends="scalar-operation">
			<value type="expression" />
			<child-def name="if" type="scalar-operation" inherits="if-op" min="0" max="inf" />
		</element-def>

		<element-def name="switch" extends="scalar-operation" inherits="abst-map-op, typed">
			<attribute name="default" type="expression" />
			<child-def name="case" type="scalar-operation" inherits="case-op" max="inf" />
		</element-def>

		<element-def name="filter" extends="operation" inherits="complex-operation">
			<attribute name="test" type="expression" />
		</element-def>

		<?DOC Filters an event such that only values which are instances of the given class are reported from this event.<br>
			The type of this event is the same as that of the source event.  One may then map this event with a cast to produce an event of the target type.?>
		<element-def name="filter-by-type" extends="operation">
			<?DOC The name of the class to filter on. Parameterized types are not permitted.?>
			<attribute name="type" type="string" />
		</element-def>

		<element-def name="reverse" extends="operation" />

		<element-def name="refresh" extends="operation">
			<attribute name="on" type="expression" />
		</element-def>

		<element-def name="refresh-each" extends="operation" inherits="complex-operation">
			<attribute name="on" type="expression" />
		</element-def>

		<element-def name="distinct" extends="operation">
			<child-def name="sort" type="sort" min="0" />
			<attribute name="use-first" type="boolean" default="false" />
			<attribute name="preserve-source-order" type="boolean" default="false" />
		</element-def>

		<element-def name="sort" extends="operation" inherits="with-element-model">
			<element-model>
				<value name-attribute="sort-value-as" />
				<value name-attribute="sort-compare-value-as" />
			</element-model>
			<?DOC The name of the value being sorted. This must be specified except for default sorting.?>
			<attribute name="sort-value-as" type="identifier" specify="optional" />
			<?DOC The name of the other value being compared.  This must be specified with the sort-with attribute.?>
			<attribute name="sort-compare-value-as" type="identifier" specify="optional" />
			<?DOC An expression that evaluates to an integer:<ul>
				<li>Less than zero if the value in sort-value-as is less than that in sort-compare-value-as</li>
				<li>Greater than zero if sort-value-as is greater than sort-compare-value-as</li>
				<li>Zero if sort-value-as is equivalent in comparison to sort-compare-value-as</li>
				</ul>?>
			<attribute name="sort-with" type="expression" specify="optional" />
			<?DOC If set to false, the sort will be reversed?>
			<attribute name="ascending" type="boolean" default="true" />
			<?DOC Instead of directly comparing values, we can compare by attributes of the value.
				Each sort-by element sorts by an attribute of the value being sorted?>
			<child-def name="sort-by" type="sort-by" min="0" max="inf" />
		</element-def>
		<?DOC Under a &lt;sort> operation, this element sorts elements by some attribute?>
		<element-def name="sort-by" extends="sort">
			<?DOC The attribute to sort on?>
			<value type="expression" />
		</element-def>

		<element-def name="unmodifiable" extends="operation">
			<attribute name="allow-updates" type="boolean" default="true" />
		</element-def>

		<element-def name="filter-mod" extends="operation" inherits="complex-operation">
			<!-- Obviously, some of these are incompatible -->
			<attribute name="no-add" type="string" specify="optional" />
			<attribute name="no-remove" type="string" specify="optional" />
			<attribute name="no-move" type="string" specify="optional" />
			<attribute name="unmodifiable" type="string" specify="optional" />
			<attribute name="filter-add" type="expression" specify="optional" />
			<attribute name="filter-remove" type="expression" specify="optional" />
		</element-def>

		<element-def name="map-equivalent" extends="map-to">
			<?DOC <p>The sorting for the mapped values. This sorting scheme must be equivalent to the sorting of the source collection for the mapped type.</p>
				<p>For distinct, non-sorted flows, this may not be specified, and instead reverse must be specified.</p>
				<p>For sorted flows (distinct or not), either the reverse operation or sorting must be specified.</p>?>
			<child-def name="sort" type="sort" min="0" />
		</element-def>

		<element-def name="flatten" extends="operation" inherits="abst-map-op">
			<attribute name="to" type="string" specify="required" />
			<!-- This option requires caching, so the default will be the same as the cached attribute and cannot be specified here -->
			<attribute name="propagate-update-to-parent" type="boolean" specify="optional" />
			<attribute name="equivalence" type="expression" specify="optional" />
			<child-def name="reverse" type="flatten-reverse" min="0" />
			<!-- This is needed to flatten sorted collections or sets -->
			<child-def name="sort" type="sort" min="0" />
		</element-def>
		<element-def name="flatten-reverse">
			<attribute name="type" type="flatten-reverse-type" />
		</element-def>

		<element-def name="cross" extends="flatten">
			<attribute name="with" type="expression" />
		</element-def>

		<element-def name="where-contained" extends="operation">
			<attribute name="filter" type="expression" />
			<attribute name="inclusive" type="boolean" default="true" />
		</element-def>

		<element-def name="group-by" extends="operation" inherits="complex-operation">
			<child-def name="key" type="operation" />
		</element-def>

		<element-def name="no-init" extends="operation" />
		<element-def name="skip" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>

		<element-def name="take" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>

		<element-def name="take-until" extends="operation">
			<attribute name="until" type="expression" specify="required" />
		</element-def>

		<?DOC Provides the size of a collection, map, or multi-map as a value.  This may not be used with scalar types.?>
		<element-def name="size" extends="operation">
			<?DOC Whether this operation provides the number of keys or values in the source structure.<br>
				This is only effective for multi-maps, for which multiple values may be stored per key.<br>
				For collections, this must be 'value' (the default).?>
			<attribute name="type" type="size-type" default="value" />
		</element-def>

		<element-def name="collect" extends="operation">
			<attribute name="active" type="boolean" specify="optional" />
		</element-def>

		<element-def name="hook" extends="model-value" inherits="with-element-model">
			<element-model>
				<value name="event" />
			</element-model>
			<?DOC The event to fire the action on. Whenever this event fires, the action will be called.<br>
				If not given, this hook runs once as soon as it is instantiated?>
			<attribute name="on" type="expression" specify="optional" />
		</element-def>

		<!-- Just a little bit of code flow structure -->
		<element-def name="loop" extends="model-value" inherits="with-local-model">
			<attribute name="init" type="expression" specify="optional" />
			<attribute name="before-while" type="expression" specify="optional" />
			<attribute name="while" type="expression" specify="required" />
			<attribute name="before-body" type="expression" specify="optional" />
			<attribute name="after-body" type="expression" specify="optional" />
			<attribute name="finally" type="expression" specify="optional" />
			<child-def name="body" type="action" min="0" max="inf" />
		</element-def>

		<?DOC This structure is expressed as a value which is the Instant of the last time the timer executed
			(or the start of the current execution if it is currently executing)?>
		<element-def name="timer" extends="model-value" inherits="with-local-model">
			<attribute name="active" type="expression" default="true" />
			<attribute name="frequency" type="expression" />
			<attribute name="strict-timing" type="boolean" default="false" />
			<attribute name="background" type="boolean" default="false" />
			<?DOC Each time the timer executes and this value is not null, it is decremented.  When the value reaches zero, the timer will deactivate.?>
			<attribute name="remaining-executions" type="expression" specify="optional" />
			<?DOC If this instant is not null, the timer will deactivate after this time?>
			<attribute name="until" type="expression" specify="optional" />
			<?DOC Whenever this duration value is assigned, the timer will activate (if inactive) and execute next at the given duration after the current time?>
			<attribute name="run-next-in" type="expression" specify="optional" />
			<?DOC Each time the timer executes, this value is assigned to the time of the next scheduled execution,
				or null if the timer is not scheduled to execute again.<br>
				If this value is assigned, the timer will activate (if it is not active) and then execute next at the given time?>
			<attribute name="next-execution" type="expression" specify="optional" />
			<?DOC Each time the timer executes, this value is incremented.?>
			<attribute name="execution-count" type="expression" specify="optional" />
			<?DOC This value is assigned to true while the timer is executing, then reset to false?>
			<attribute name="executing" type="expression" specify="optional" />
			<?DOC An action to perform each time the timer executes?>
			<value type="expression" specify="optional" />
		</element-def>
	</elements>

	<auto-inheritance>
		<auto-inherit inherits="int-value">
			<target element="value" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-list">
			<target element="list" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-map">
			<target element="map" role="model.value" />
			<target element="multi-map" role="model.value" />
		</auto-inherit>

		<auto-inherit inherits="if-as-operation">
			<target element="if" role="transform.op" />
		</auto-inherit>
	</auto-inheritance>
</qonfig-def>
