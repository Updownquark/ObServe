<?xml version="1.0" encoding="UTF-8"?>

<qonfig-def root="models">
	<value-types>
		<pattern name="int">\d{1,7}</pattern> <!-- Positive integer -->
		<pattern name="float">[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?</pattern>

		<external name="identifier" />
		<external name="expression" />
		<external name="expression-or-string" />
	</value-types>

	<add-ons>
		<add-on name="model-element" requires="model-value">
			<attribute name="name" type="identifier" specify="required" />
		</add-on>

		<add-on name="int-model-value" requires="model-value">
			<attribute name="model-value.type" specify="optional" default="" />
		</add-on>
		<add-on name="allow-ext-model" abstract="true" />
		<add-on name="ext-model-value" requires="model-value">
			<value-mod specify="forbidden" /> <!-- External values are specified by code instantiating the model -->
		</add-on>
		<add-on name="int-list" requires="list" inherits="int-model-value">
			<child-def name="element" type="element" min="0" max="inf" />
		</add-on>
		<add-on name="int-map" requires="map" inherits="int-model-value">
			<attribute name="map.key-type" specify="optional" default="" />
			<child-def name="entry" type="entry" min="0" max="inf" />
		</add-on>
		<add-on name="map-model-value" requires="model-value">
			<attribute name="key-type" type="string" specify="required" />
		</add-on>
		<add-on name="sorted" abstract="true" >
			<attribute name="sort-with" type="expression" specify="optional" />
		</add-on>

		<add-on name="allow-config-model" abstract="true" />
		<add-on name="config-model-value" requires="model-value">
			<attribute name="config-path" type="string" specify="optional" />
			<attribute name="format" type="expression" specify="optional" />
		</add-on>
		<add-on name="config-value" requires="value" inherits="config-model-value">
			<attribute name="default" type="expression-or-string" specify="optional" />
		</add-on>
		<add-on name="config-map" requires="map" inherits="config-model-value">
			<attribute name="key-format" type="expression" specify="optional" />
		</add-on>

		<add-on name="map-reverse-type" abstract="true" />
		<add-on name="source-modifying-transform-reverse" inherits="map-reverse-type">
			<attribute name="function" type="expression" />
			<attribute name="enabled" type="expression" specify="optional" />
			<attribute name="accept" type="expression" specify="optional" />
			<attribute name="add" type="expression" specify="optional" />
			<attribute name="add-accept" type="expression" specify="optional" />
		</add-on>
		<add-on name="source-replacing-transform-reverse" inherits="source-modifying-transform-reverse">
			<attribute name="stateful" type="boolean" specify="optional" default="true" />
			<attribute name="inexact" type="boolean" specify="optional" default="false" />
		</add-on>

		<add-on name="abst-map-op" abstract="true" >
			<attribute name="cache" type="boolean" default="true" />
			<attribute name="re-eval-on-update" type="boolean" default="true" />
			<attribute name="fire-if-unchanged" type="boolean" default="true" />
			<attribute name="null-to-null" type="boolean" default="false" />
			<attribute name="many-to-one" type="boolean" default="false" />
			<attribute name="one-to-many" type="boolean" default="false" />
		</add-on>

		<add-on name="flatten-reverse-type" abstract="true" />
		<add-on name="flatten-replace-source" inherits="flatten-reverse-type">
			<attribute name="function" type="expression" />
			<attribute name="accept" type="expression" />
		</add-on>
		<add-on name="flatten-modify-source" inherits="flatten-replace-source">
			<attribute name="add" type="expression" />
			<attribute name="add-accept" type="expression" />
		</add-on>

		<add-on name="file-source-type" requires="file-source" abstract="true" />
		<add-on name="native" inherits="file-source-type" requires="file-source" />
		<add-on name="sftp" inherits="file-source-type" requires="file-source">
			<attribute name="host" type="expression-or-string" />
			<attribute name="user" type="expression-or-string" />
			<attribute name="password" type="expression-or-string" />
			<attribute name="connecting" type="expression" />
		</add-on>
		<add-on name="archive-type" requires="archive-method" />
		<add-on name="zip" inherits="archive-type" requires="archive-method" />
		<add-on name="tar" inherits="archive-type" requires="archive-method" />
		<add-on name="gz" inherits="archive-type" requires="archive-method" />

		<add-on name="format-type" requires="format" abstract="true" />
		<add-on name="text" inherits="format-type" requires="format" />
		<add-on name="file" inherits="format-type" requires="format">
			<attribute name="file-source" type="expression" specify="optional" />
			<attribute name="working-dir" type="expression" specify="optional" />
			<attribute name="allow-empty" type="boolean" default="false" />
		</add-on>
		<add-on name="int-format" inherits="format-type" requires="format">
			<attribute name="grouping-separator" type="string" specify="optional" />
		</add-on>
		<add-on name="long-format" inherits="int-format" requires="format" />
		<add-on name="double" inherits="format-type" requires="format">
			<attribute name="sig-digs" type="int" />
			<attribute name="unit" type="string" specify="optional" />
			<attribute name="unit-required" type="boolean" default="true" />
			<attribute name="metric-prefixes" type="boolean" default="false" />
			<attribute name="metric-prefixes-p2" type="boolean" default="false" />
			<child-def name="prefix" type="prefix" min="0" max="inf" />
			<!-- TODO -->
		</add-on>
		<add-on name="instant" inherits="format-type" requires="format">
			<attribute name="day-format" type="string" default="EEE MMM dd, yyyy" />
			<attribute name="time-zone" type="string" specify="optional" />
			<attribute name="max-resolution" type="string" default="Second" />
			<attribute name="format-24h" type="boolean" default="false" />
			<attribute name="relative-eval-type" type="string" default="Closest" />
			<attribute name="relative-to" type="expression-or-string" specify="optional" />
		</add-on>
		<add-on name="regex-format" inherits="format-type" requires="format" />
		<add-on name="regex-format-string" inherits="format-type" requires="format" />
		<add-on name="validate-type" abstract="true" />
		<add-on name="regex-validation" inherits="validate-type">
			<attribute name="pattern" type="expression-or-string" />
		</add-on>
		<add-on name="filter-validation" inherits="validate-type">
			<attribute name="filter" type="expression" />
		</add-on>
	</add-ons>

	<elements>
		<element-def name="import">
			<value type="string" specify="required" />
		</element-def>
		<element-def name="imports">
			<child-def name="import" type="import" min="0" max="inf" />
		</element-def>
		
		<!-- Models, values and transformations -->
		<element-def name="abst-model" abstract="true">
			<attribute name="name" type="identifier" specify="required" />
			<child-def name="value" type="model-value" inherits="model-element" min="0" max="inf" />
		</element-def>
		<element-def name="model-value" abstract="true">
			<attribute name="type" type="string" specify="required" />
			<value type="expression-or-string" specify="optional" />
		</element-def>
		<element-def name="event" extends="model-value" inherits="allow-ext-model" />
		<element-def name="action" extends="model-value" inherits="allow-ext-model" />
		<element-def name="value" extends="model-value" inherits="allow-ext-model,allow-config-model" />
		<element-def name="list" extends="model-value" inherits="allow-ext-model,allow-config-model" />
		<element-def name="value-set" extends="list" />
		<element-def name="set" extends="list" />
		<element-def name="sorted-set" extends="set" />
		<element-def name="sorted-list" extends="list" />
		<element-def name="map" extends="model-value" inherits="allow-ext-model,allow-config-model,map-model-value" />
		<element-def name="sorted-map" extends="map" />
		<element-def name="multi-map" extends="map" />
		<element-def name="sorted-multi-map" extends="multi-map" />
		
		<!-- External models.  These serve only as markers that are later checked against the external models that are provided
			 to the app.  Since they are only expectations of values that will be supplied externally,
			 no values can be specified in the elements. -->
		<element-def name="ext-model" extends="abst-model">
			<child-def name="sub-model" type="ext-model" min="0" max="inf" requires="allow-ext-model" />
		</element-def>
		<!-- Internal models.  These function as variables that are defined and sometimes instantiated inside the app. -->
		<element-def name="model" extends="abst-model">
			<child-def name="sub-model" type="model" min="0" max="inf" />
		</element-def>
		<element-def name="constant" extends="model-value">
			<value-mod type="expression-or-string" specify="required" />
		</element-def>
		<element-def name="element">
			<value type="expression-or-string" specify="required" />
		</element-def>
		<element-def name="entry" extends="element">
			<attribute name="key" type="expression-or-string" />
		</element-def>
		<!-- Config models.  These function similarly to internal models, except that they represent persistent values from
			 ObservableConfig.  Some of these allow specification of default values, but these are only used if the persistent data
			 for the value has not been initialized. -->
		<element-def name="config" extends="model">
			<attribute name="config-name" type="string" specify="optional" />
			<attribute name="config-dir" type="expression" specify="optional" />
			<child-def name="old-config-name" type="old-config-name" min="0" max="inf" />
			<child-mod child="abst-model.value" requires="allow-config-model" />
			<attribute name="backup" type="boolean" default="true" />
		</element-def>
		<element-def name="old-config-name">
			<value type="string" />
		</element-def>
		<element-def name="first-value" extends="model-value" inherits="int-model-value">
			<!-- Type can be inferred from the super-type of the other values, but the user can specify it instead -->
			<attribute name="model-value.type" specify="optional" default="" />
			<value-mod specify="forbidden" />
			<child-def name="value" type="model-value" min="1" max="inf" inherits="int-model-value" />
		</element-def>
		
		<!-- Transformations.  These take values supplied by other models and perform some dynamic operation on the value(s) to produce
			 a result that is a product of the source. -->
		<element-def name="transform" extends="model-value" inherits="int-model-value">
			<attribute name="source" type="expression" specify="required" />
			<!-- Type can be inferred from the transformation, but the user can specify that the result is a super-type instead -->
			<attribute name="int-model-value.type" specify="optional" default="" />
			<!-- Default of this attribute is whatever the flow prefers -->
			<attribute name="active" type="boolean" specify="optional" />
			<child-def name="op" type="operation" min="0" max="inf" /> <!-- Allow min=0 to facilitate aliases -->
		</element-def>
		<element-def name="operation" abstract="true" />
		<element-def name="modify-source" inherits="source-modifying-transform-reverse" />
		<element-def name="replace-source" inherits="source-replacing-transform-reverse" />
		<element-def name="map-reverse">
			<attribute name="type" type="map-reverse-type" />
		</element-def>
		<element-def name="combine-with">
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="map-to" extends="operation" inherits="abst-map-op">
			<attribute name="equivalence" type="expression" specify="optional" />
			<attribute name="function" type="expression" specify="required" />
			<child-def name="combined-value" type="combine-with" min="0" max="inf" />
			<child-def name="reverse" type="map-reverse" min="0" />
		</element-def>
		<element-def name="filter" extends="operation">
			<attribute name="test" type="expression" />
		</element-def>
		<element-def name="filter-by-type" extends="operation">
			<attribute name="type" type="string" />
		</element-def>
		<element-def name="reverse" extends="operation" />
		<element-def name="refresh" extends="operation">
			<attribute name="on" type="expression" />
		</element-def>
		<element-def name="refresh-each" extends="operation">
			<attribute name="on" type="expression" />
		</element-def>
		<element-def name="distinct" extends="operation">
			<attribute name="sort-with" type="expression" specify="optional" />
			<attribute name="use-first" type="boolean" default="false" />
			<attribute name="preserve-source-order" type="boolean" default="false" />
		</element-def>
		<element-def name="sort" extends="operation" inherits="sorted" />
		<element-def name="with-equivalence" extends="operation">
			<attribute name="equivalence" type="expression" />
		</element-def>
		<element-def name="unmodifiable" extends="operation">
			<attribute name="allow-updates" type="boolean" default="true" />
		</element-def>
		<element-def name="filter-mod" extends="operation">
			<!-- Obviously, some of these are incompatible -->
			<attribute name="no-add" type="string" specify="optional" />
			<attribute name="no-remove" type="string" specify="optional" />
			<attribute name="no-move" type="string" specify="optional" />
			<attribute name="unmodifiable" type="string" specify="optional" />
			<attribute name="filter-add" type="expression" specify="optional" />
			<attribute name="filter-remove" type="expression" specify="optional" />
		</element-def>
		<element-def name="map-equivalent" extends="map-to" inherits="sorted">
			<!-- For distinct flows, the reverse operation must be specified.
				 For distinct sorted flows, either the reverse operation or a sorting function may be specified. -->
		</element-def>
		<element-def name="flatten-reverse">
			<attribute name="type" type="flatten-reverse-type" />
		</element-def>
		<element-def name="flatten" extends="operation" inherits="abst-map-op">
			<attribute name="function" type="expression" specify="optional" /> <!-- Don't require if the type is already flattenable -->
			<!-- This option requires caching, so the default will be the same as the cached attribute and cannot be specified here -->
			<attribute name="propagate-update-to-parent" type="boolean" specify="optional" />
			<child-def name="reverse" type="flatten-reverse" min="0" max="1" />
		</element-def>
		<element-def name="cross" extends="flatten">
			<attribute name="with" type="expression" />
		</element-def>
		<element-def name="where-contained" extends="operation">
			<attribute name="filter" type="expression" />
			<attribute name="inclusive" type="boolean" default="true" />
		</element-def>
		<element-def name="group-by" extends="operation">
			<child-def name="key" type="operation" />
		</element-def>
		<element-def name="no-init" extends="operation" />
		<element-def name="skip" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>
		<element-def name="take" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>
		<element-def name="take-until" extends="operation">
			<attribute name="until" type="expression" specify="required" />
		</element-def>
		<element-def name="archive-method">
			<attribute name="type" type="archive-type" />
		</element-def>
		<element-def name="file-source" extends="model-value">
			<attribute name="model-value.type" specify="forbidden" default="" />
			<attribute name="type" type="file-source-type" default="native" />
			<attribute name="max-archive-depth" type="expression" default="10" />
			<child-def name="archive" type="archive-method" min="0" max="inf" />
		</element-def>

		<element-def name="models">
			<child-def name="model" type="abst-model" min="0" max="inf" />
		</element-def>

		<element-def name="validate">
			<attribute name="type" type="validate-type" />
		</element-def>
		<element-def name="format" extends="model-value">
			<attribute name="model-value.type" specify="forbidden" default="" />
			<attribute name="type" type="format-type" />
			<child-def name="validate" type="validate" min="0" max="inf" />
		</element-def>
		<element-def name="prefix">
			<attribute name="name" type="string" />
			<attribute name="exp" type="int" specify="optional" />
			<attribute name="multiplier" type="float" specify="optional" />
		</element-def>
		<element-def name="simple-config-format" extends="model-value">
			<!-- Optional because this can be supplied for some types -->
			<attribute name="format" type="expression" specify="optional" />
			<attribute name="default" type="string" specify="optional" />
		</element-def>
	</elements>

	<auto-inheritance>
		<auto-inherit inherits="ext-model-value">
			<target element="model-value" role="ext-model.value" />
		</auto-inherit>

		<auto-inherit inherits="int-model-value">
			<target element="model-value" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-list">
			<target element="list" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-map">
			<target element="map" role="model.value" />
		</auto-inherit>

		<auto-inherit inherits="config-model-value">
			<target element="model-value" role="config.value" />
		</auto-inherit>
		<auto-inherit inherits="config-value">
			<target element="value" role="config.value" />
		</auto-inherit>
		<auto-inherit inherits="config-map">
			<target element="map" role="config.value" />
		</auto-inherit>
	</auto-inheritance>
</qonfig-def>
