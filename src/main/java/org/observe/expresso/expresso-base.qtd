<?xml version="1.0" encoding="UTF-8"?>

<!--
This file defines the basic set of operations for the expresso toolkit.

It builds on the Expresso-Core specification and contains everything needed for basic expresso models - values, collections, transformations,
	external and internal models.
-->
<qonfig-def name="Expresso-Base" version="0.1" extends:core="Expresso-Core v0.1">
	<value-types>
		<pattern name="int">\d{1,7}</pattern> <!-- Positive integer -->
		<pattern name="float">[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?</pattern>
	</value-types>

	<add-ons>
		<add-on name="int-value" requires="value">
			<attribute name="init" type="expression" specify="optional" />
		</add-on>
		<add-on name="int-list" requires="list">
			<child-def name="element" type="element" min="0" max="inf" />
		</add-on>
		<add-on name="int-map" requires="map">
			<attr-mod name="map.key-type" specify="optional" default="" />
			<child-def name="entry" type="entry" min="0" max="inf" />
		</add-on>

		<add-on name="map-model-value" requires="model-value">
			<attribute name="key-type" type="string" specify="required" />
			<value-mod specify="forbidden" />
		</add-on>
		<add-on name="sorted-model-value" requires="model-value">
			<child-def name="sort" type="sort" min="0" />
		</add-on>

		<add-on name="complex-operation" requires="operation">
			<attribute name="source-as" type="identifier" />
		</add-on>
		<add-on name="abst-map-op" requires="operation" inherits="complex-operation" abstract="true" >
			<attribute name="cache" type="boolean" default="true" />
			<attribute name="re-eval-on-update" type="boolean" default="true" />
			<attribute name="fire-if-unchanged" type="boolean" default="true" />
			<attribute name="null-to-null" type="boolean" default="false" />
			<attribute name="many-to-one" type="boolean" default="false" />
			<attribute name="one-to-many" type="boolean" default="false" />
		</add-on>

		<add-on name="map-reverse-type" requires="map-reverse" abstract="true" />
		<add-on name="modify-source" inherits="map-reverse-type">
			<attribute name="enabled" type="expression" specify="optional" />
			<attribute name="accept" type="expression" specify="optional" />
			<attribute name="add" type="expression" specify="optional" />
			<attribute name="add-accept" type="expression" specify="optional" />
		</add-on>
		<add-on name="replace-source" inherits="modify-source">
			<attribute name="inexact" type="boolean" default="false" />
		</add-on>

		<add-on name="flatten-reverse-type" abstract="true" />
		<add-on name="flatten-replace-source" inherits="flatten-reverse-type">
			<attribute name="function" type="expression" />
			<attribute name="accept" type="expression" />
		</add-on>
		<add-on name="flatten-modify-source" inherits="flatten-replace-source">
			<attribute name="add" type="expression" />
			<attribute name="add-accept" type="expression" />
		</add-on>
	</add-ons>

	<elements>
		<!-- Models, values and transformations -->
		<!-- An Observable that fires values to be consumed by listeners -->
		<element-def name="event" extends="model-value" inherits="allow-ext-model" />
		<!-- An action that can be invoked -->
		<element-def name="action" extends="model-value" inherits="allow-ext-model,with-local-model" />
		<element-def name="action-group" extends="model-value" inherits="with-local-model">
			<child-def name="action" type="action" min="0" max="inf" />
		</element-def>
		<!-- A simple value. For internal models, this may be configured with:
		  - An 'init=' attribute to initialize it. The value will not change as any components of the init expression change,
		  		and the value is settable regardless of the init expression
		  - A value. This value will be slaved to that of the given expression, changing as it changes. Assignment of this value will
		  		propagate to the configured value
		  - Nothing, in which case the initial value will be defaulted (same as a java field)
		-->
		<element-def name="value" extends="model-value" inherits="allow-ext-model" />
		<!-- An ordered collection of values.  For internal models, this may be initialized with elements -->
		<element-def name="list" extends="model-value" inherits="allow-ext-model">
			<value-mod specify="forbidden" />
		</element-def>
		<!-- An ordered collection with added addition capabilities -->
		<element-def name="value-set" extends="list" />
		<!-- An ordered collection of values with no duplicates -->
		<element-def name="set" extends="list" />
		<!-- An ordered, sorted collection of values -->
		<element-def name="sorted-list" extends="list" inherits="sorted-model-value" />
		<!-- An ordered, sorted collection of values with no duplicates -->
		<element-def name="sorted-set" extends="set" inherits="sorted-model-value" />
		<!-- An association of key values each to a single other value -->
		<element-def name="map" extends="model-value" inherits="allow-ext-model,map-model-value" />
		<!-- An association of sorted key values each to a single other value -->
		<element-def name="sorted-map" extends="map" inherits="sorted-model-value" />
		<!-- An association of key values each to one or more other values -->
		<element-def name="multi-map" extends="map" />
		<!-- An association of sorted key values each to one or more other values -->
		<element-def name="sorted-multi-map" extends="multi-map" inherits="sorted-model-value" />

		<!-- A simple value that cannot be changed after initialization. This value does not change as the expression used to initialize it does. -->		
		<element-def name="constant" extends="model-value">
			<value-mod specify="required" />
		</element-def>
		<!-- May be used to initialize collections in internal models -->
		<element-def name="element">
			<value type="expression" specify="required" />
		</element-def>
		<!-- May be used to initialize maps in internal models -->
		<element-def name="entry" extends="element">
			<attribute name="key" type="expression" />
		</element-def>

		<!-- Transformations.  These take values supplied by other models and perform some dynamic operation on the value(s) to produce
			 a result that is a product of the source. -->
		<element-def name="transform" extends="model-value">
			<attribute name="source" type="expression" specify="required" />
			<!-- Default of this attribute is whatever the flow prefers -->
			<child-def name="op" type="operation" min="0" max="inf" /> <!-- Allow min=0 to facilitate aliases -->
		</element-def>
		<element-def name="operation" abstract="true" />
		<element-def name="disable" extends="operation" inherits="complex-operation">
			<attribute name="with" type="expression" />
		</element-def>
		<element-def name="filter-accept" extends="operation" inherits="complex-operation">
			<attribute name="test" type="expression" />
		</element-def>
		<element-def name="combine-with" inherits="named">
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="map-with">
			<value type="expression" />
		</element-def>
		<element-def name="map-reverse">
			<attribute name="type" type="map-reverse-type" />
			<!-- Previous result reference? -->
			<attribute name="target-as" type="identifier" />
			<value type="expression" />
		</element-def>
		<element-def name="map-to" extends="operation" inherits="abst-map-op, typed">
			<attribute name="equivalence" type="expression" specify="optional" />
			<child-def name="combined-value" type="combine-with" min="0" max="inf" />
			<child-def name="map" type="map-with" />
			<child-def name="reverse" type="map-reverse" min="0" />
		</element-def>
		<element-def name="filter" extends="operation" inherits="complex-operation">
			<attribute name="test" type="expression" />
		</element-def>
		<element-def name="filter-by-type" extends="operation">
			<attribute name="type" type="expression" />
		</element-def>
		<element-def name="reverse" extends="operation" />
		<element-def name="refresh" extends="operation">
			<attribute name="on" type="expression" />
		</element-def>
		<element-def name="refresh-each" extends="operation" inherits="complex-operation">
			<attribute name="on" type="expression" />
		</element-def>
		<element-def name="distinct" extends="operation">
			<child-def name="sort" type="sort" min="0" />
			<attribute name="use-first" type="boolean" default="false" />
			<attribute name="preserve-source-order" type="boolean" default="false" />
		</element-def>
		<element-def name="sort" extends="operation">
			<attribute name="sort-value-as" type="identifier" specify="optional" />
			<attribute name="sort-compare-value-as" type="identifier" specify="optional" />
			<attribute name="sort-with" type="expression" specify="optional" />
			<attribute name="ascending" type="boolean" default="true" />
			<child-def name="sort-by" type="sort-by" min="0" max="inf" />
		</element-def>
		<element-def name="sort-by" extends="sort">
			<value type="expression" />
		</element-def>
		<element-def name="with-equivalence" extends="operation">
			<attribute name="equivalence" type="expression" />
		</element-def>
		<element-def name="unmodifiable" extends="operation">
			<attribute name="allow-updates" type="boolean" default="true" />
		</element-def>
		<element-def name="filter-mod" extends="operation" inherits="complex-operation">
			<!-- Obviously, some of these are incompatible -->
			<attribute name="no-add" type="string" specify="optional" />
			<attribute name="no-remove" type="string" specify="optional" />
			<attribute name="no-move" type="string" specify="optional" />
			<attribute name="unmodifiable" type="string" specify="optional" />
			<attribute name="filter-add" type="expression" specify="optional" />
			<attribute name="filter-remove" type="expression" specify="optional" />
		</element-def>
		<element-def name="map-equivalent" extends="map-to">
			<!-- For distinct flows, the reverse operation must be specified.
				 For distinct sorted flows, either the reverse operation or a sorting function may be specified. -->
			<child-def name="sort" type="sort" min="0" />
		</element-def>
		<element-def name="flatten-reverse">
			<attribute name="type" type="flatten-reverse-type" />
		</element-def>
		<element-def name="flatten" extends="operation" inherits="abst-map-op">
			<!-- This option requires caching, so the default will be the same as the cached attribute and cannot be specified here -->
			<attribute name="propagate-update-to-parent" type="boolean" specify="optional" />
			<child-def name="reverse" type="flatten-reverse" min="0" />
			<!-- This is needed to flatten sorted collections or sets -->
			<child-def name="sort" type="sort" min="0" />
		</element-def>
		<element-def name="cross" extends="flatten">
			<attribute name="with" type="expression" />
		</element-def>
		<element-def name="where-contained" extends="operation">
			<attribute name="filter" type="expression" />
			<attribute name="inclusive" type="boolean" default="true" />
		</element-def>
		<element-def name="group-by" extends="operation" inherits="complex-operation">
			<child-def name="key" type="operation" />
		</element-def>
		<element-def name="no-init" extends="operation" />
		<element-def name="skip" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>
		<element-def name="take" extends="operation">
			<attribute name="times" type="int" specify="required" />
		</element-def>
		<element-def name="take-until" extends="operation">
			<attribute name="until" type="expression" specify="required" />
		</element-def>
		<element-def name="collect" extends="operation">
			<attribute name="active" type="boolean" specify="optional" />
		</element-def>
		<element-def name="first-value" extends="model-value">
			<value-mod specify="forbidden" />
			<child-def name="value" type="model-value" min="1" max="inf" />
		</element-def>

		<!-- Just a little bit of code flow structure -->
		<element-def name="loop" extends="model-value" inherits="with-local-model">
			<attribute name="init" type="expression" specify="optional" />
			<attribute name="before-while" type="expression" specify="optional" />
			<attribute name="while" type="expression" specify="required" />
			<attribute name="before-body" type="expression" specify="optional" />
			<attribute name="after-body" type="expression" specify="optional" />
			<attribute name="finally" type="expression" specify="optional" />
			<child-def name="body" type="action" min="0" max="inf" />
		</element-def>
	</elements>

	<auto-inheritance>
		<auto-inherit inherits="int-value">
			<target element="value" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-list">
			<target element="list" role="model.value" />
		</auto-inherit>
		<auto-inherit inherits="int-map">
			<target element="map" role="model.value" />
		</auto-inherit>
	</auto-inheritance>
</qonfig-def>
