<?xml version="1.0" encoding="UTF-8"?>

<?DOC The core of the Quick architecture.  Contains types for defining an application with models and a user interface. ?>
<qonfig-def name="Quick-Core" version="0.1" xmlns:expresso="Expresso-Base v0.1" xmlns:style="Quick-Style v0.1">
	<value-types>
		<one-of name="window-close-action">
			<?DOC The window will remain visible when the user attempts to close it?>
			<literal>do-nothing</literal>
			<?DOC The window will become invisible when the user closes it, but will remain available for re-display?>
			<literal>hide</literal>
			<?DOC The window will be disposed of when the user closes it, and will not re-display. The application will not terminate.?>
			<literal>dispose</literal>
			<?DOC The application will terminate when the user closes the window?>
			<literal>exit</literal>
		</one-of>

		<one-of name="mouse-button">
			<?DOC The left mouse button?>
			<literal>left</literal>
			<?DOC The right mouse button?>
			<literal>right</literal>
			<?DOC The middle mouse button?>
			<literal>middle</literal>
		</one-of>

		<pattern name="widget-name">((?&lt;ns&gt;[a-zA-Z0-9_\\-]+)\:)?(?&lt;widget&gt;[a-zA-Z0-9_\\-]+)</pattern>
	</value-types>

	<add-ons>
		<add-on name="abstract-window" abstract="true">
			<attribute name="title" type="expression" specify="optional" />
			<?DOC Controls when the window is displayed?>
			<attribute name="visible" type="expression" specify="optional" />
			<?DOC The action to take when the user closes the window by clicking the "X" at the corner?>
		</add-on>
		<add-on name="window" inherits="abstract-window">
			<?DOC The x-coordinate of the position of the top-left corner of the window in the graphics environment?>
			<attribute name="x" type="expression" specify="optional" />
			<?DOC The y-coordinate of the position of the top-left corner of the window in the graphics environment?>
			<attribute name="y" type="expression" specify="optional" />
			<?DOC The width of the window?>
			<attribute name="width" type="expression" specify="optional" />
			<?DOC The height of the window?>
			<attribute name="height" type="expression" specify="optional" />
			<?DOC The icon for the window?>
			<attribute name="window-icon" type="expression" specify="optional" />
			<?DOC The title for the window?>
			<attribute name="close-action" type="window-close-action" default="hide" />
		</add-on>

		<add-on name="with-background" inherits="styled" abstract="true">
			<element-model>
				<?DOC Whether the mouse is currently hovered over the widget?>
				<value name="hovered" type="boolean" priority="5" />
				<?DOC Whether the widget currently has focus?>
				<value name="focused" type="boolean" priority="1" />
				<?DOC Whether the left mouse button is currently pressed over the widget?>
				<value name="pressed" type="boolean" priority="1000" />
				<?DOC Whether the right mouse button is currently pressed over the widget?>
				<value name="rightPressed" type="boolean" priority="1001" />
			</element-model>
			<styles>
				<?DOC The background color of the widget?>
				<style-attribute name="color" type="java.awt.Color" />
				<?DOC The cursor to display for the mouse when it is over the widget?>
				<style-attribute name="mouse-cursor" type="org.observe.quick.MouseCursor" />
			</styles>
		</add-on>
		<add-on name="with-text" inherits="styled" abstract="true">
			<styles>
				<?DOC The color of the text?>
				<style-attribute name="font-color" type="java.awt.Color" trickle-down="true" />
				<?DOC The size of the text?>
				<style-attribute name="font-size" type="double" trickle-down="true" />
				<?DOC The thickness of the text, e.g. `bold`, `extra-bold`, `normal` or `light`?>
				<style-attribute name="font-weight" type="double" trickle-down="true" />
				<?DOC The slant of the text, e.g. `italic` or `normal`?>
				<style-attribute name="font-slant" type="double" trickle-down="true" />
				<?DOC Whether the text is underlined?>
				<style-attribute name="underline" type="boolean" trickle-down="false" />
				<?DOC Whether the text is struck through?>
				<style-attribute name="strike-through" type="boolean" trickle-down="false" />
				<?DOC Whether the text is small and high?>
				<style-attribute name="super-script" type="boolean" trickle-down="false" />
				<?DOC Whether the text is small and low?>
				<style-attribute name="sub-script" type="boolean" trickle-down="false" />
			</styles>
		</add-on>
		<add-on name="iconized" inherits="styled" abstract="true">
			<styles>
				<style-attribute name="icon" type="javax.swing.Icon" trickle-down="false" />
			</styles>
		</add-on>

		<add-on name="renderer" requires="widget" abstract="true" />
		<add-on name="rendering" abstract="true">
			<element-meta name="default-renderer" type="widget" inherits="renderer" min="0" />
			<?DOC The widget used to render each value for this rendering widget?>
			<child-def name="renderer" type="widget" inherits="renderer" min="0" />
		</add-on>
	</add-ons>

	<elements>
		<?DOC The root of a Quick application document?>
		<element-def name="quick" inherits="with-element-model">
			<element-model>
				<?DOC An event that fires after the application's model's have been loaded?>
				<event name="onModelLoad" type="Void" />
				<?DOC An event that fires after the application's user interface body has been loaded?>
				<event name="onBodyLoad" type="Void" />
			</element-model>
			<?DOC The head section of the Quick document, containing application models, style sheets, etc.?>
			<child-def name="head" type="head" min="0" />
			<?DOC The widget content of the application?>
			<child-def name="body" type="widget" min="1" />
		</element-def>
		<element-def name="head" extends="expresso" inherits="with-style-sheet" />

		<element-def name="widget" abstract="true" inherits="with-background,with-text">
			<?DOC The name of the widget.  Typically only used for debugging?>
			<attribute name="name" type="expression" specify="optional" />
			<?DOC The tooltip to display when the user hovers the mouse over the widget, for user feedback?>
			<attribute name="tooltip" type="expression" specify="optional" />
			<?DOC Determines when the widget is displayed to the user or hidden?>
			<attribute name="visible" type="expression" specify="optional" />
			<?DOC The border to draw around the widget?>
			<child-def name="border" type="border" min="0" />
			<?DOC Listeners to events like mouse clicks or key presses?>
			<child-def name="event-listener" type="event-listener" min="0" max="inf" />
			<?DOC Dialogs that the widget may display to the user?>
			<child-def name="dialog" type="dialog" min="0" max="inf" />
		</element-def>

		<element-def name="event-listener" inherits="with-element-model,with-local-model" abstract="true">
			<element-model>
				<?DOC Whether the Alt button on the keyboard is being held down during the event?>
				<value name="altPressed" type="boolean" />
				<?DOC Whether the Ctrl button on the keyboard is being held down during the event?>
				<value name="ctrlPressed" type="boolean" />
				<?DOC Whether the Shift button on the keyboard is being held down during the event?>
				<value name="shiftPressed" type="boolean" />
			</element-model>
			<?DOC A test that must pass against an event for this listener to be invoked?>
			<child-def name="filter" type="event-filter" min="0" max="inf" />
			<?DOC The action to perform when the event occurs?>
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="event-filter">
			<?DOC A boolean expression that must be true for the listener to be invoked?>
			<value type="expression" specify="required" />
		</element-def>
		<element-def name="mouse-listener" extends="event-listener" abstract="true">
			<element-model>
				<?DOC The x-coordinate of the mouse relative in the widget?>
				<value name="x" type="int" />
				<?DOC The y-coordinate of the mouse relative in the widget?>
				<value name="y" type="int" />
			</element-model>
		</element-def>
		<element-def name="mouse-button-listener" extends="mouse-listener" abstract="true">
			<element-model>
				<?DOC The mouse button that the event is for?>
				<value name="button" />
			</element-model>
			<?DOC The button that this listener will listen to.  If not specified, the listener will trigger for any button.?>
			<attribute name="button" type="mouse-button" specify="optional" />
		</element-def>
		<?DOC Listens to mouse clicks, that is, the user pressing an releasing a mouse button in approximately the same location?>
		<element-def name="on-click" extends="mouse-button-listener">
			<element-model>
				<?DOC The number of successive clicks that this event represents?>
				<value name="clickCount" type="int" />
			</element-model>
			<?DOC The number of consecutive clicks necessary to trigger this listener.  If not specified, the listener will trigger for any number of clicks.?>
			<attribute name="click-count" type="expression" specify="optional" />
		</element-def>
		<?DOC Listens to mouse button presses?>
		<element-def name="on-mouse-press" extends="mouse-button-listener" />
		<?DOC Listens to mouse button releases?>
		<element-def name="on-mouse-release" extends="mouse-button-listener" />
		<?DOC Listens to the mouse's location over a widget. This listener may not be invoked during drag events.?>
		<element-def name="on-mouse-move" extends="mouse-listener" />
		<?DOC Notified when the mouse enters the widget from outside?>
		<element-def name="on-mouse-enter" extends="mouse-listener" />
		<?DOC Notified when the mouse leaves a widget?>
		<element-def name="on-mouse-exit" extends="mouse-listener" />
		<?DOC Listens to scroll events?>
		<element-def name="on-scroll" extends="mouse-listener">
			<element-model>
				<?DOC How much and in what direction the scroll event scrolled?> 
				<value name="scrollAmount" type="int" />
			</element-model>
		</element-def>
		<element-def name="key-listener" extends="event-listener" abstract="true" />
		<element-def name="key-code-listener" extends="key-listener" abstract="true">
			<element-model>
				<?DOC The keyboard key that was pressed or release?>
				<value name="keyCode" type="org.observe.quick.KeyCode" />
			</element-model>
			<?DOC The key code that this listener will be notified for.  If not specified, this listener will be notified for any key.?>
			<attribute name="key" type="identifier" specify="optional" />
		</element-def>
		<?DOC Listens to keyboard key presses?>
		<element-def name="on-key-press" extends="key-code-listener" />
		<?DOC Listens to keyboard key releases?>
		<element-def name="on-key-release" extends="key-code-listener" />
		<?DOC Listens to "effective" keyboard events--when a character is typed?>
		<element-def name="on-type" extends="key-listener">
			<element-model>
				<?DOC The character that was typed?>
				<value name="typedChar" type="char" />
			</element-model>
			<?DOC The typed character that this listener will be notified for.  If not specified, this listener will be notified for any character.?>
			<attribute name="char" type="string" specify="optional" />
		</element-def>

		<element-def name="container" extends="widget" abstract="true">
			<?DOC A widget displayed inside the container?>
			<child-def name="content" type="widget" min="0" max="inf" />
		</element-def>

		<element-def name="border" abstract="true" inherits="styled">
			<styles>
				<?DOC The color of the border?>
				<style-attribute name="border-color" type="java.awt.Color" />
				<?DOC The thickness of the border in pixels?>
				<style-attribute name="thickness" type="int" />
			</styles>
		</element-def>
		<?DOC A simple line border?>
		<element-def name="line-border" extends="border" />
		<?DOC A line border with text in it?>
		<element-def name="titled-border" extends="line-border" inherits="with-text">
			<?DOC The title to display for the border?>
			<attribute name="title" type="expression" specify="required" />
		</element-def>

		<element-def name="dialog" abstract="true" inherits="abstract-window,with-local-model">
			<attr-mod name="abstract-window.visible" specify="required" />
			<attr-mod name="abstract-window.title" specify="required" />
		</element-def>
		<element-def name="content-dialog" extends="dialog" abstract="true">
			<child-def name="content" type="widget" />
		</element-def>

		<!-- Now a basic outline of abstract Quick widgets -->
		<element-def name="value-widget" extends="widget" abstract="true" >
			<element-model>
				<?DOC The value being managed by the widget?>
				<value name-attribute="value-name" priority="1" />
			</element-model>
			<?DOC The name of this widget's value for use in internal expressions?>
			<attribute name="value-name" type="identifier" default="value" />
			<?DOC The value to edit with the widget?>
			<attribute name="value" type="expression" specify="required" />
			<?DOC A value to disable this widget.  If the value is non-null, the widget will be disabled and the value will be displayed to the user.?>
			<attribute name="disable-with" type="expression" specify="optional" />
		</element-def>
		<element-def name="text-widget" extends="value-widget" abstract="true">
			<?DOC The format to use to display the widget's value to the user and allow them to edit it.<br>
			This may not need to be specified for certain standard types, e.g String, int, double.<br>
			The full list of default-formattable types is implementation-dependent.?>
			<attribute name="format" type="expression" specify="optional" />
			<?DOC Whether the user can modify the text in the widget.
				This is distinct from disable-with in that some UIs differentiate visually between disabled and uneditable widgets.?>
			<attribute name="editable" type="expression" specify="optional" />
		</element-def>
	</elements>
</qonfig-def>
