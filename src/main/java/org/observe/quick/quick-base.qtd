<?xml version="1.0" encoding="UTF-8"?>

<qonfig-def name="Quick-Base" version="0.1" extends:core="Quick-Core v0.1">
	<add-ons>
		<add-on name="orientation" />
		<add-on name="horizontal" inherits="orientation" />
		<add-on name="vertical" inherits="orientation" />

		<add-on name="border-layout-region" abstract="true" />
		<add-on name="inline-alignment" />
		<add-on name="center" inherits="border-layout-region,inline-alignment" />
		<add-on name="north" inherits="border-layout-region,v-sizeable" />
		<add-on name="south" inherits="border-layout-region,v-sizeable" />
		<add-on name="east" inherits="border-layout-region,h-sizeable" />
		<add-on name="west" inherits="border-layout-region,h-sizeable" />

		<add-on name="h-positionable">
			<!-- These positions can be in pixels (px), percent (%), or lexips (pixels from trailing edge, xp) -->
			<attribute name="left" type="expression" specify="optional" />
			<attribute name="h-center" type="expression" specify="optional" />
			<attribute name="right" type="expression" specify="optional" />
		</add-on>
		<add-on name="v-positionable">
			<!-- These positions can be in pixels (px), percent (%), or lexips (pixels from trailing edge, xp) -->
			<attribute name="top" type="expression" specify="optional" />
			<attribute name="v-center" type="expression" specify="optional" />
			<attribute name="bottom" type="expression" specify="optional" />
		</add-on>
		<add-on name="h-sizeable">
			<!-- Width can be in pixels (px) or percent (%) -->
			<attribute name="width" type="expression" specify="optional" />
			<!-- The types of the min/max/pref sizes are in pixels - not relative -->
			<attribute name="min-width" type="expression" specify="optional" />
			<attribute name="pref-width" type="expression" specify="optional" />
			<attribute name="max-width" type="expression" specify="optional" />
		</add-on>
		<add-on name="v-sizeable">
			<!-- Height can be in pixels (px) or percent (%) -->
			<attribute name="height" type="expression" specify="optional" />
			<!-- The types of the min/max/pref sizes are in pixels - not relative -->
			<attribute name="min-height" type="expression" specify="optional" />
			<attribute name="pref-height" type="expression" specify="optional" />
			<attribute name="max-height" type="expression" specify="optional" />
		</add-on>
		<add-on name="generic-sizeable">
			<!-- Size can be in pixels (px) or percent (%) -->
			<attribute name="size" type="expression" specify="optional" />
			<!-- The types of the min/max/pref sizes are in pixels - not relative -->
			<attribute name="min-size" type="expression" specify="optional" />
			<attribute name="pref-size" type="expression" specify="optional" />
			<attribute name="max-size" type="expression" specify="optional" />
		</add-on>

		<!-- Layouts -->
		<add-on name="layout" />

		<add-on name="border-layout-child">
			<attribute name="region" type="border-layout-region" />
		</add-on>
		<add-on name="border-layout" requires="box" inherits="layout">
			<child-mod child="box.content" inherits="border-layout-child" />
		</add-on>
		<add-on name="leading" inherits="inline-alignment" />
		<add-on name="trailing" inherits="inline-alignment" />
		<add-on name="justify" inherits="inline-alignment" />
		<add-on name="inline-layout" requires="box" inherits="layout">
			<attribute name="orientation" type="orientation" />
			<attribute name="main-align" type="inline-alignment" default="leading" />
			<attribute name="cross-align" type="inline-alignment" default="justify" />
			<!--<child-mod child="box.content" inherits="generic-sizeable" />-->
		</add-on>
		<add-on name="simple-layout-child" inherits="h-positionable,v-positionable,h-sizeable,v-sizeable" />
		<add-on name="simple-layout" requires="box" inherits="layout">
			<child-mod child="box.content" inherits="simple-layout-child" />
		</add-on>

		<add-on name="multi-value-renderable" requires="widget">
			<element-model>
				<value name-attribute="value-name" priority="1" />
				<value name="selected" type="boolean" priority="100" />
			</element-model>
			<attribute name="value-name" type="identifier" default="value" />
		</add-on>
		<add-on name="tabular-widget" requires="multi-value-widget">
			<element-model>
				<value name="rowIndex" type="int" priority="2" />
				<value name="columnIndex" type="int" priority="2" />
			</element-model>
			<child-def name="columns" requires="column-set" max="inf" /> <!-- Need at least one column -->
		</add-on>
		<add-on name="column-set" abstract="true"/>
		<add-on name="column-edit-type" requires="column-edit" abstract="true">
			<attribute name="commit" type="expression" />
			<attribute name="editable-if" type="expression" specify="optional" />
			<attribute name="accept" type="expression" specify="optional" />
		</add-on>
		<add-on name="modify-row-value" requires="column-edit" inherits="column-edit-type">
			<attribute name="row-update" type="boolean" default="false" />
		</add-on>
		<add-on name="replace-row-value" requires="column-edit" inherits="column-edit-type">
			<attr-mod name="column-edit-type.commit" specify="optional" default="" />
		</add-on>
		<add-on name="column-editor" requires="value-widget" />

		<add-on name="field" requires="widget">
			<attribute name="field-label" type="expression" specify="optional" />
			<attribute name="fill" type="boolean" specify="optional" />
		</add-on>
		
		<add-on name="abstract-tab" inherits="with-element-model">
			<attribute name="tab-id" type="expression" specify="optional" />
			<attribute name="tab-name" type="expression" specify="optional" />
			<attribute name="tab-icon" type="expression" specify="optional" />
			<attribute name="removable" type="boolean" default="false" />
			<attribute name="on-remove" type="expression" specify="optional" />
			<attribute name="select-on" type="expression" specify="optional" />
			<attribute name="on-select" type="expression" specify="optional" />
		</add-on>

		<add-on name="tab" requires="widget" inherits="abstract-tab">
			<attr-mod name="abstract-tab.tab-id" type="expression" specify="required" />
		</add-on>

		<add-on name="menu-container">
			<child-def name="menu-bar" type="menu-bar" min="0" />
		</add-on>
		<add-on name="dialog" inherits="window">
			<attribute name="modal" type="boolean" default="true" />
		</add-on>
	</add-ons>

	<elements>
		<element-def name="ext-widget" extends="widget">
			<attribute name="ref" type="string" specify="required" />
		</element-def>

		<element-def name="spacer" extends="widget">
			<attribute name="length" type="int" />
		</element-def>
		<element-def name="button" extends="widget">
			<value type="expression" specify="optional" />
			<attribute name="icon" type="expression" specify="optional" />
			<attribute name="action" type="expression" specify="required" />
		</element-def>

		<!-- Editors -->
		<element-def name="check-box" extends="value-widget">
			<!-- value here is the text for the check box's label -->
			<value type="expression" specify="optional" />
		</element-def>
		<element-def name="toggle-button" extends="value-widget">
			<!-- value here is the toggle button's text -->
			<value type="expression" specify="optional" />
			<attribute name="icon" type="expression" specify="optional" />
		</element-def>
		<element-def name="file-button" extends="value-widget">
			<attribute name="open" type="boolean" />
		</element-def>
		<element-def name="label" extends="text-widget">
			<!-- The value is the text for the label.  If this text is specified, it takes the place of both value and format. -->
			<value type="string" specify="optional" />
			<attr-mod name="value-widget.value" specify="optional" default="" />
			<attr-mod name="text-widget.editable" specify="forbidden" default="false" />
			<attribute name="icon" type="expression" specify="optional" />
		</element-def>
		<element-def name="editable-text-widget" extends="text-widget">
			<element-model>
				<value name="error" type="String" priority="10000" />
				<value name="warning" type="String" priority="5000" />
			</element-model>
			<attribute name="commit-on-type" type="boolean" default="false" />
		</element-def>
		<element-def name="text-field" extends="editable-text-widget">
			<attribute name="empty-text" type="expression" specify="optional" />
			<attribute name="columns" type="int" specify="optional" />
		</element-def>
		<element-def name="text-area" extends="editable-text-widget">
			<attribute name="rows" type="expression" />
			<attribute name="html" type="expression" />
		</element-def>
		<element-def name="spinner" extends="text-field">
			<attribute name="increment" type="expression" specify="optional" />
		</element-def>
		<element-def name="progress-bar" extends="value-widget">
			<attribute name="max" type="expression" specify="required" />
		</element-def>
		<element-def name="render-field-panel" extends="value-widget">
			<child-def name="field" type="value-widget" min="0" max="inf" />
		</element-def>

		<element-def name="collection-selector-widget" extends="value-widget" abstract="true">
			<element-model>
				<value name="selected" type="boolean" priority="100" />
			</element-model>
			<attribute name="values" type="expression" specify="required" />
		</element-def>
		<element-def name="combo" extends="collection-selector-widget" />
		<element-def name="radio-buttons" extends="collection-selector-widget" />
		<element-def name="toggle-buttons" extends="collection-selector-widget" />

		<element-def name="multi-value-widget" extends="widget" inherits="multi-value-renderable">
			<attribute name="selection" type="expression" specify="optional" />
			<attribute name="multi-selection" type="expression" specify="optional" />
		</element-def>
		<element-def name="little-list" extends="multi-value-widget">
			<attribute name="values" type="expression" specify="required" />
		</element-def>
		<element-def name="column" inherits="column-set,styled">
			<element-model>
				<value name-attribute="column-value-name" priority="2" />
			</element-model>
			<attribute name="name" type="expression" />
			<!-- Unspecified column-value means to use the model value for the column value -->
			<attribute name="value" type="expression" specify="optional" />
			<attribute name="column-value-name" type="identifier" default="columnValue" />
			<attribute name="header-tooltip" type="expression" specify="optional" />
			<child-def name="renderer" type="widget" inherits="renderer" min="0" />
			<child-def name="edit" type="column-edit" min="0" />
		</element-def>
		<element-def name="column-edit" inherits="with-element-model">
			<element-model>
				<value name-attribute="column-edit-value-name" />
			</element-model>
			<attribute name="type" type="column-edit-type" />
			<attribute name="column-edit-value-name" type="identifier" default="columnEditValue" />
			<attribute name="clicks" type="int" specify="optional" />
			<child-def name="editor" type="value-widget" inherits="column-editor" />
		</element-def>
		<element-def name="columns-ref" inherits="column-set">
			<attribute name="model-value" type="expression" />
			<value type="expression" />
		</element-def>
		<element-def name="abstract-column-set" extends="model-value" inherits="with-element-model" abstract="true">
			<element-model>
				<value name-attribute="model-value-name" />
			</element-model>
			<attribute name="model-value-type" type="string" />
			<attribute name="model-value-name" type="identifier" default="modelValue" />
		</element-def>
		<element-def name="columns" extends="abstract-column-set">
			<child-def name="column" type="column" min="0" max="inf" />
		</element-def>
		<element-def name="variable-columns" extends="abstract-column-set" inherits="column-set">
			<element-model>
				<value name-attribute="column-variable-name" />
			</element-model>
			<attribute name="for-each" type="expression" />
			<attribute name="column-variable-name" type="identifier" default="columnVariableValue" />
			<child-def name="column" type="column" />
		</element-def>
		<element-def name="abstract-value-action" abstract="true">
			<attribute name="name" type="expression" specify="optional" />
			<attribute name="as-button" type="boolean" default="true" />
			<attribute name="as-popup" type="boolean" default="false" />
			<attribute name="icon" type="expression" specify="optional" />
			<attribute name="action" type="expression" specify="required" />
			<attribute name="enabled" type="expression" specify="optional" />
			<attribute name="allow-for-empty" type="boolean" default="false" />
			<attribute name="allow-for-multiple" type="boolean" default="true" />
			<attribute name="tooltip" type="expression" specify="optional" />
		</element-def>
		<element-def name="value-action" extends="abstract-value-action" inherits="with-element-model">
			<element-model>
				<value name-attribute="value-name"/>
			</element-model>
			<attribute name="value-name" type="identifier" default="actionValue" />
		</element-def>
		<element-def name="multi-value-action" extends="abstract-value-action" inherits="with-element-model">
			<element-model>
				<list name-attribute="values-name"/>
			</element-model>
			<attribute name="values-name" type="identifier" default="actionValues" />
		</element-def>
		<element-def name="table" extends="multi-value-widget" inherits="tabular-widget">
			<attribute name="rows" type="expression" specify="required" />
			<child-def name="action" type="abstract-value-action" min="0" max="inf" />
		</element-def>
		<element-def name="tree" extends="multi-value-widget">
			<element-model>
				<value name-attribute="path-name" priority="1" />
				<value name="leaf" type="boolean" priority="20" />
			</element-model>
			<attribute name="root" type="expression" specify="required" />
			<attribute name="children" type="expression" specify="required" />
			<attribute name="leaf" type="expression" specify="optional" />
			<attribute name="path-name" type="identifier" default="path" />
			<child-def name="tree-column" type="column" min="0" max="1" />
			<child-def name="action" type="abstract-value-action" min="0" max="inf" />
		</element-def>

		<!-- Containers -->
		<element-def name="box" extends="container">
			<attribute name="opacity" type="expression" specify="optional" />
			<attribute name="layout" type="layout" specify="required" />
		</element-def>
		<element-def name="field-panel" extends="container">
			<child-mod child="content" inherits="field" />
		</element-def>
		<element-def name="singleton-container" extends="container" abstract="true">
			<child-mod child="content" min="1" max="1" />
		</element-def>
		<element-def name="scroll" extends="singleton-container" />
		
		<element-def name="tabs" extends="container">
			<element-model>
				<value name="tabValue" priority="1" />
				<value name="tabSelected" type="boolean" priority="100" />
			</element-model>
			<attribute name="selected" type="expression" specify="optional" />
			<child-mod child="content" inherits="tab" />
			<child-def name="tab-set" type="tab-set" min="0" max="inf" />
		</element-def>
		<element-def name="tab-set" extends="container">
			<attribute name="values" type="expression" />
			<child-mod child="content" inherits="tab" min="1" max="1" />
		</element-def>
		<element-def name="split" extends="container">
			<attribute name="orientation" type="orientation" specify="required" />
			<attribute name="split-position" type="expression" specify="optional" />
			<child-mod child="content" min="2" max="2" />
		</element-def>
		
		<!-- Miscellaneous -->
		<element-def name="menu-bar" inherits="with-text">
			<child-def name="menu" type="menu" min="0" max="inf" />
		</element-def>
		<element-def name="abst-menu-item" extends="label" abstract="true">
		</element-def>
		<element-def name="menu" extends="abst-menu-item">
			<child-def name="item" type="menu-item" min="0" max="inf" />
		</element-def>
		<element-def name="menu-item" extends="abst-menu-item">
			<attribute name="action" type="expression" />
		</element-def>
		<element-def name="check-box-menu-item" extends="abst-menu-item">
			<attribute name="selected" type="expression" />
		</element-def>
	</elements>

	<auto-inheritance>
		<auto-inherit inherits="menu-container">
			<target element="quick" />
		</auto-inherit>
	</auto-inheritance>
</qonfig-def>
